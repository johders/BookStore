@inject NavigationManager NavigationManager
@inject ICommonService commonService

@inject IBookService BookService

<PageTitle>@_heading | Buddy's Books</PageTitle>

<SectionContent SectionName="PageTitle">
	@if (commonService.IsWeb)
	{
		<h1 class="m-0 text-white fw-bold">@_heading</h1>
	}
	else
	{
		<span>@_heading</span>
	}
</SectionContent>

<div class="container-lg">

	<div class="row">
		<div class="col-md-9">
			<div class="row">
				<h3 class="mt-2 mb-3 heading">@_heading</h3>
				<BooksGrid Books="_authorBooks" />

				<div class="paging w-100">
					@if (commonService.IsWeb)
					{
						<div class="d-flex justify-content-center align-items-center">
							<Pagination PrevPageUrl="@_previousPageUrl" NextPageUrl="@_nextPageUrl" />
						</div>
					}
					else
					{
						<div class="d-flex justify-content-between align-items-center">
							<Pagination PrevPageUrl="@_previousPageUrl" NextPageUrl="@_nextPageUrl" />
						</div>
					}
				</div>

			</div>
		</div>

		<div class="col-md-3">
			<PopularBooks PopularBooksList="_popularBooks"/>
		</div>
	</div>
</div>

@code {

	private const int PageSize = 16;

	[Parameter, EditorRequired]
	public string AuthorSlug { get; set; }

	[Parameter]
	public int? PageNo { get; set; }

	private BookListDto[] _authorBooks = [];
	private BookListDto[] _popularBooks = [];
	private int _totalCount = 0;

	private string? _nextPageUrl;
	private string? _previousPageUrl;

	private string _heading = "Author Books";

	protected override async Task OnParametersSetAsync()
	{
		if (PageNo <= 0 || string.IsNullOrWhiteSpace(AuthorSlug) || PageNo < 2)
		{
			NavigationManager.NavigateTo("/");
			return;
		}

		commonService.ShowLoader("Loading author books...");

		(_authorBooks, _totalCount) = await BookService.GetBooksByAuthorAsync(PageNo ?? 1, PageSize, AuthorSlug);
		_popularBooks = await BookService.GetPopularBooksAsync(10);

		SetPagingUrls();

		var author = _authorBooks.FirstOrDefault()?.Author;
		if (author is not null)
		{
			_heading = $"Books by {author.Value.Name}";
		}
		if (PageNo > 1)
		{
			_heading += $" | Page {PageNo}";
		}

		commonService.HideLoader();
	}

	private void SetPagingUrls()
	{
		var currentPageBookCount = _authorBooks.Length;

		var parts = NavigationManager.Uri.Split('?');
		var queryString = "";

		if (parts.Length > 1)
		{
			queryString = $"?{parts[1]}";
		}
		if (PageNo is null || PageNo == 1)
		{
			_previousPageUrl = null;
			if (currentPageBookCount < PageSize)
			{
				_nextPageUrl = null;
			}
			else
			{
				_nextPageUrl = $"/page/2{queryString}";
			}
		}
		else
		{
			if (PageNo > 2)
			{
				_previousPageUrl = $"/page/{(PageNo - 1)}{queryString}";
			}
			else
			{
				_previousPageUrl = $"/{queryString}";
			}

			if (currentPageBookCount < PageSize)
			{
				_nextPageUrl = null;
			}
			else
			{
				_nextPageUrl = $"/page/{(PageNo + 1)}{queryString}";
			}


		}
	}

	// protected override async Task OnInitializedAsync()
	// {
	// 	// if (PageNo <= 0 || string.IsNullOrWhiteSpace(AuthorSlug))
	// 	// {
	// 	// 	NavigationManager.NavigateTo("/");
	// 	// 	return;
	// 	// }

	// 	// commonService.ShowLoader("Loading author books...");

	// 	// (_authorBooks, _totalCount) = await BookService.GetBooksByAuthorAsync(PageNo ?? 1, PageSize, AuthorSlug);
	// 	// _popularBooks = await BookService.GetPopularBooksAsync(10);

	// 	// var author = _authorBooks.FirstOrDefault()?.Author;
	// 	// if(author is not null)
	// 	// {
	// 	// 	_heading = $"Books by {author.Value.Name}";
	// 	// }

	// 	// commonService.HideLoader();
	// }
}
